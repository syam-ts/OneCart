<%- include('../partials/adminHeader') %>
<style>
    #toast-container > .toast-success {
      background: linear-gradient(to right, #1fe90ce3, #22242F 50% ) !important;
      width: 350px;
      height: 70px;
      position: relative;
      color: white; 
      text-align: center;
      font-size: larger;
      font-family: Verdana, Geneva, Tahoma, sans-serif;
    }
    
    #toast-container > .toast-success::after {
      content: ""; 
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 4px; 
      background-color: rgb(0, 255, 55); 
      transform: scaleX(0); 
      transform-origin: right; 
      animation: expandLine 5s linear forwards; 
    }
  
    @keyframes expandLine {
      to {
        transform: scaleX(1); 
      }
    }
  </style>

   <main>

        <div class="p-6">
          <div class="mb-10 text-center">
            <h1 class="michroma-regular text-lg text-gray-950 py-5">Dashboard</h1>
          </div>
          
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                <div class="bg-white rounded-md p-6">
                    <div class="flex justify-between mb-6">
                        <div>
                            <div class="flex items-center mb-1">
                                <div class="text-2xl font-semibold text-green-600"><%= list[0] %></div>
                            </div>
                            <div class="text-sm font-medium text-gray-400">Users</div>
                        </div>
                    </div>
                    <a href="/admin/userManagement" class="text-[#f84525] font-medium text-sm hover:text-red-800">View</a>
                </div>
                <div class="bg-white rounded-md p-6">
                    <div class="flex justify-between mb-4">
                        <div>
                            <div class="flex items-center mb-1">
                                <div class="text-2xl font-semibold text-blue-600"><%= list[1] %></div> </div>
                            <div class="text-sm font-medium text-gray-400">Brands</div>
                        </div>
                    </div>
                    <a href="/admin/product-list" class="text-[#f84525] font-medium text-sm hover:text-red-800">View</a>
                </div>
                <div class="bg-white rounded-md border border-gray-100 p-6 shadow-md shadow-black/5">
                    <div class="flex justify-between mb-6">
                        <div>
                            <div class="text-2xl font-semibold mb-1 text-red-600"><%= list[2] %></div>
                            <div class="text-sm font-medium text-gray-400">Categories</div>
                        </div>
                    </div>
                    <a href="/admin/category-list" class="text-[#f84525] font-medium text-sm hover:text-red-800">View</a>
                </div>
            </div>
            <div class="mb-10 text-center">
              <h1 class="michroma-regular text-lg text-gray-950 py-5">Sales Overview</h1>
            </div>
            
                <div class="grid grid-cols-1 lg:grid-cols-1 mb-6">
         
                  <div class="relative flex flex-col min-w-0 mb-4 lg:mb-0 break-words w-full ml-20">
                      <div class="mb-0 px-0 border-0">
                          <div class="flex flex-wrap items-center px-4 py-2">
                              <div class="  w-10/12">
                                  <div class="grid grid-cols-1 lg:grid-cols-1 gap-6 mb-6">
                                      <div class="bg-white p-6 lg:col-span-2 shadow-xl border border-gray-300">
                                      
                                          <select class="graphSales block w-36 h-6  text-gray-500 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6 font-sans">
                                            <option selected disabled selected>Daily</option>
                                            <option value="Daily">Daily</option>
                                            <option value="Monthly">Monthly</option>
                                            <option value="Yearly">Yearly</option>
                                         </select>
                                         <button class="text-blue-500 graphChange">ok</button>
                                         <canvas class="myChart"></canvas>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
        </div>


<section class="pb-28 w-3/3 pt-12">
  <div class="text-center">
    <h1 class="michroma-regular text-lg text-gray-950">Top 10 Overview</h1>
  </div>
  <div class="flex flex-row py-12">
    <table class="items-center bg-transparent border-collapse w-full">
      <thead>
        <tr>
          <th class=" bg-gray-700 text-white text-center align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold">
            Product Name</th></tr>
      </thead>
      <tbody>
        <tr class="flex flex-col">
          <% list[3].forEach(pro => { %>
          <td class="border-t-0 py-2 align-middle text-xs whitespace-nowrap text-center  font-semibold border border-gray-900">
             <%= pro.productName %> 
          </td>
        <% }) %></tr>
      </tbody>
    </table>

    <table class="items-center bg-transparent border-collapse w-full">
      <thead>
        <tr>
          <th class=" bg-gray-700 text-white text-center align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold">
            Category Name</th></tr>
      </thead>
      <tbody>
        <tr class="flex flex-col">
          <% list[4].forEach(pro => { %>
          <td class="border-t-0 py-2 align-middle text-xs whitespace-nowrap text-center font-semibold border border-gray-900">
             <%= pro._id %> <% }) %>
      </tr>
      </tbody>
    </table>

    <table class="items-center bg-transparent border-collapse w-full">
      <thead>
        <tr>
          <th class=" bg-gray-700 text-white text-center align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold">
            Brand Name</th>
           </tr>
      </thead>
      <tbody>
        <tr class="flex flex-col">
          <%list[5].forEach(pro => { %>
          <td class="border-t-0 py-2 align-middle text-xs whitespace-nowrap text-center font-semibold border border-gray-900">
             <%= pro.brand %> 
          </td>
        <% }) %>
      </tr>
      </tbody>
    </table>
  </div>

</section>


    </main>
    <script>
      function parseQueryParams() {
          var queryParams = {};
          var queryString = window.location.search.substring(1);
          var params = queryString.split("&");
          for (var i = 0; i < params.length; i++) {
              var pair = params[i].split("=");
              queryParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
          }
          return queryParams;
      }
  
      document.addEventListener('DOMContentLoaded', function() {
          var queryParams = parseQueryParams();
          var message = queryParams['message'];
          var type = queryParams['type'];
          if (message) {
              if (type === 'success') {
                  toastr.success(message);
              } else if (type === 'error') {
                  toastr.error(message);
              }
          }
      });
  </script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://unpkg.com/@popperjs/core@2"></script>


    <!---------------- sort dropdown ------------------->
    <script>
      function toggleDropdown() {
          var dropdown = document.getElementById('dropdown');
          dropdown.classList.toggle('hidden');
        }
  </script>

    <!---------------- toastr script ------------------>
    <script>
        var toastMessage = "<%= typeof toastMessage !== 'undefined' ? toastMessage.text : '' %>";
        document.addEventListener('DOMContentLoaded', function() {
            if (toastMessage !== '') {
                toastr.success(toastMessage)}
        });
    </script>
    <script>

   //<--------------------- default graph ---------------------->
   fetch('/admin/orders/Daily')
      .then(response => {
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }
          return response.json();
      })
      .then(data => {
          const ordersData = data.map(order => ({
              day: new Date(order.createdate).getDate(), 
              quantity: order.total
          }));

          const dailyData = Array.from({ length: 30 }, () => 0);

          ordersData.forEach(order => {
              const day = order.day;
              dailyData[day - 1] += order.quantity; 
          });

          const ctx = document.getElementsByClassName('myChart');
          new Chart(ctx, {
              type: 'bar',
              data: {
                  labels: Array.from({ length: 30 }, (_, i) => (i + 1).toString()), 
                  datasets: [{
                      label: '# Daily',
                      data: dailyData,
                      backgroundColor: 'rgba(16, 232, 163, 1)',
                      borderColor: 'rgba(54, 162, 235, 1)', 
                      color : 'rgba(54, 162, 235, 1)',
                      borderWidth: 1
                  }]
              },
              options: {
    scales: {
      x: {
        grid: {
          color: 'rgba(249, 221, 41, 0.6)'
          
        },
        ticks: {
          color: 'green' 
        }
      },
      y: {
        grid: {
          color: 'rgba(249, 221, 41, 0.6)'
          
        },
        ticks: {
          color: 'red' 
        }
      }
    }
  }
          });
      })
      .catch(error => console.error('Error fetching or processing data:', error));


 // <------------------------Graph changing ------------------------------>
    const graphChangeButton = document.querySelectorAll('.graphChange');
    graphChangeButton.forEach(button => {
        button.addEventListener('click', (e) => {
        const div = e.target.closest('div');
        const select = div.querySelector('select');
        const changeValue = select.value;
     
        const canvas = div.querySelector('canvas');
        let chartInstance = Chart.getChart(canvas);
        if (chartInstance) {
            chartInstance.destroy();
            }

        if(changeValue == "Daily"){
          fetch('/admin/orders/Daily')
      .then(response => {
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }
          return response.json();
      })
      .then(data => {
          const ordersData = data.map(order => ({
              day: new Date(order.createdate).getDate(), 
              quantity: order.total
          }));

          const dailyData = Array.from({ length: 30 }, () => 0);

          ordersData.forEach(order => {
              const day = order.day;
              dailyData[day - 1] += order.quantity; 
          });

          const ctx = document.getElementsByClassName('myChart');
          new Chart(ctx, {
              type: 'bar',
              data: {
                  labels: Array.from({ length: 30 }, (_, i) => (i + 1).toString()), 
                  datasets: [{
                      label: '# Daily',
                      data: dailyData,
                      backgroundColor: 'rgba(16, 232, 163, 1)',
                      borderColor: 'rgba(54, 162, 235, 1)', 
                      color : 'rgba(54, 162, 235, 1)',
                      borderWidth: 1
                  }]
              },
              options: {
    scales: {
      x: {
        grid: {
          color: 'rgba(249, 221, 41, 0.6)'
          
        },
        ticks: {
          color: 'green' 
        }
      },
      y: {
        grid: {
          color: 'rgba(249, 221, 41, 0.6)'
          
        },
        ticks: {
          color: 'red' 
        }
      }
    }
  }})})
      .catch(error => console.error('Error fetching or processing data:', error));

      }else if(changeValue == "Monthly"){

          fetch('/admin/orders/Monthly')
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            const ordersData = data.map(order => ({
              month: new Date(order.createdate).getMonth(),
              quantity: order.total 
            }));
            const monthlyData = Array.from({ length: 12 }, () => 0); 
            ordersData.forEach(order => {
              const month = order.month;
              monthlyData[month] += order.quantity;
            });
            const ctx = document.getElementsByClassName('myChart');
          
            new Chart(ctx, {
              type: 'bar',
              data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                  label: '# Monthly',
                  data: monthlyData,
                  backgroundColor: 'rgba(16, 232, 163, 1)',
                  borderColor: 'rgba(54, 162, 235, 1)', 
                  borderWidth: 1
                }]
              },
              options: {
                scales: {
                  y: {
                    beginAtZero: true
                  }
                }
              }
            });
            
          })
          .catch(error => console.error('Error fetching orders:', error)
        )}else if(changeValue == "Yearly"){

          fetch('/admin/orders/Yearly')
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            const ordersData = data.map(order => ({
              year: new Date(order.createdate).getFullYear(),
              quantity: order.total 
            }));
            const yearlyData = Array.from({ length: 13 }, () => 0); 
            ordersData.forEach(order => {
              const year = order.year - 2018;
              yearlyData[year] += order.quantity;
            });
            const ctx = document.getElementsByClassName('myChart');
          
             new Chart(ctx, {
              type: 'bar',
              data: {
                labels: ['2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030'],
                datasets: [{
                  label: '# Yearly',
                  data: yearlyData,
                  backgroundColor: 'rgba(16, 232, 163, 1)',
                  borderColor: 'rgba(54, 162, 235, 1)', 
                  borderWidth: 1
                }]
              },
              options: {
                scales: {
                  y: {
                    beginAtZero: true
                  }
                }
              }
            });
            
          })
          .catch(error => console.error('Error fetching orders:', error));
        }})
      })
    </script>


      <!---------------- chart script ---------------->
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      
      
    
<%- include('../partials/adminFooter') %>
